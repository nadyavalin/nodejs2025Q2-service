openapi: 3.0.3
info:
  title: Home Library Service
  description: REST service for managing a home music library
  version: 1.0.0
servers:
  - url: http://localhost:4000
    description: Local development server
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
          description: HTTP status code
        message:
          type: string
          example: Invalid UUID
          description: Error message
        error:
          type: string
          example: BadRequest
          description: Error type
      required:
        - statusCode
        - message
        - error
    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
          description: User UUID
        login:
          type: string
          example: TestUser
          description: User login
        version:
          type: integer
          example: 1
          description: User version
        createdAt:
          type: integer
          example: 1697059200000
          description: Creation timestamp (ms)
        updatedAt:
          type: integer
          example: 1697059200000
          description: Update timestamp (ms)
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
          example: TestUser
          description: User login
        password:
          type: string
          example: password123
          description: User password
      required:
        - login
        - password
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          example: password123
          description: Old password
        newPassword:
          type: string
          example: newpassword456
          description: New password
      required:
        - oldPassword
        - newPassword
    Artist:
      type: object
      properties:
        id:
          type: string
          example: 43de7388-8fbb-4165-acfb-a216292115e7
          description: Artist UUID
        name:
          type: string
          example: Metallica
          description: Artist name
        grammy:
          type: boolean
          example: true
          description: Has Grammy award
      required:
        - id
        - name
        - grammy
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Metallica
          description: Artist name
        grammy:
          type: boolean
          example: true
          description: Has Grammy award
      required:
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
          example: Metallica
          description: Artist name
        grammy:
          type: boolean
          example: true
          description: Has Grammy award
    Album:
      type: object
      properties:
        id:
          type: string
          example: 8a101b75-8976-4618-9d50-af17b4c9de59
          description: Album UUID
        name:
          type: string
          example: Load
          description: Album name
        year:
          type: integer
          example: 1996
          description: Release year
        artistId:
          type: string
          example: 43de7388-8fbb-4165-acfb-a216292115e7
          description: Artist UUID
          nullable: true
      required:
        - id
        - name
        - year
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Load
          description: Album name
        year:
          type: integer
          example: 1996
          description: Release year
        artistId:
          type: string
          example: 43de7388-8fbb-4165-acfb-a216292115e7
          description: Artist UUID
          nullable: true
      required:
        - name
        - year
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
          example: Load
          description: Album name
        year:
          type: integer
          example: 1996
          description: Release year
        artistId:
          type: string
          example: 43de7388-8fbb-4165-acfb-a216292115e7
          description: Artist UUID
          nullable: true
    Track:
      type: object
      properties:
        id:
          type: string
          example: 627b767a-dccc-4a85-a49d-c82584965401
          description: Track UUID
        name:
          type: string
          example: Ronnie
          description: Track name
        artistId:
          type: string
          example: 43de7388-8fbb-4165-acfb-a216292115e7
          description: Artist UUID
          nullable: true
        albumId:
          type: string
          example: 8a101b75-8976-4618-9d50-af17b4c9de59
          description: Album UUID
          nullable: true
        duration:
          type: integer
          example: 317
          description: Duration in seconds
      required:
        - id
        - name
        - duration
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Ronnie
          description: Track name
        artistId:
          type: string
          example: 43de7388-8fbb-4165-acfb-a216292115e7
          description: Artist UUID
          nullable: true
        albumId:
          type: string
          example: 8a101b75-8976-4618-9d50-af17b4c9de59
          description: Album UUID
          nullable: true
        duration:
          type: integer
          example: 317
          description: Duration in seconds
      required:
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
          example: Ronnie
          description: Track name
        artistId:
          type: string
          example: 43de7388-8fbb-4165-acfb-a216292115e7
          description: Artist UUID
          nullable: true
        albumId:
          type: string
          example: 8a101b75-8976-4618-9d50-af17b4c9de59
          description: Album UUID
          nullable: true
        duration:
          type: integer
          example: 317
          description: Duration in seconds
    FavoritesResponse:
      type: object
      properties:
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
          description: List of favorite artists
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
          description: List of favorite albums
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
          description: List of favorite tracks
      required:
        - artists
        - albums
        - tracks
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: Added to favorites
      required:
        - message
paths:
  /user:
    get:
      tags:
        - User
      summary: Get all users
      description: Retrieves all users (password excluded).
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
    post:
      tags:
        - User
      summary: Create a new user
      description: Creates a new user with login and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        description: User UUID
    get:
      tags:
        - User
      summary: Get user by ID
      description: Retrieves a user by ID (password excluded).
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - User
      summary: Update user password
      description: Updates the user's password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: Password updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Old password incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - User
      summary: Delete user
      description: Deletes a user by ID.
      responses:
        '204':
          description: User deleted
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /track:
    get:
      tags:
        - Track
      summary: Get all tracks
      description: Retrieves all tracks.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
    post:
      tags:
        - Track
      summary: Create a new track
      description: Creates a new track.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: Track created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                statusCode: 400
                message: Name and duration are required
                error: BadRequest
  /track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: 627b767a-dccc-4a85-a49d-c82584965401
        description: Track UUID
    get:
      tags:
        - Track
      summary: Get track by ID
      description: Retrieves a track by ID.
      responses:
        '200':
          description: Track found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Track
      summary: Update track
      description: Updates a track by ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: Track updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Track
      summary: Delete track
      description: Deletes a track by ID.
      responses:
        '204':
          description: Track deleted
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Track not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /album:
    get:
      tags:
        - Album
      summary: Get all albums
      description: Retrieves all albums.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'
    post:
      tags:
        - Album
      summary: Create a new album
      description: Creates a new album.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: Album created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                statusCode: 400
                message: Name and year are required
                error: BadRequest
  /album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: 8a101b75-8976-4618-9d50-af17b4c9de59
        description: Album UUID
    get:
      tags:
        - Album
      summary: Get album by ID
      description: Retrieves an album by ID.
      responses:
        '200':
          description: Album found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Album not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Album
      summary: Update album
      description: Updates an album by ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: Album updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Album'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Album not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Album
      summary: Delete album
      description: Deletes an album by ID.
      responses:
        '204':
          description: Album deleted
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Album not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /artist:
    get:
      tags:
        - Artist
      summary: Get all artists
      description: Retrieves all artists.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'
    post:
      tags:
        - Artist
      summary: Create a new artist
      description: Creates a new artist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: Artist created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: 43de7388-8fbb-4165-acfb-a216292115e7
        description: Artist UUID
    get:
      tags:
        - Artist
      summary: Get artist by ID
      description: Retrieves an artist by ID.
      responses:
        '200':
          description: Artist found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Artist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Artist
      summary: Update artist
      description: Updates an artist by ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: Artist updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Artist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Artist
      summary: Delete artist
      description: Deletes an artist by ID.
      responses:
        '204':
          description: Artist deleted
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Artist not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /favs:
    get:
      tags:
        - Favorites
      summary: Get all favorites
      description: Retrieves all favorite artists, albums, and tracks as full records.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
  /favs/artist/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: 43de7388-8fbb-4165-acfb-a216292115e7
        description: Artist UUID
    post:
      tags:
        - Favorites
      summary: Add artist to favorites
      description: Adds an artist to the favorites list.
      responses:
        '201':
          description: Artist added to favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Artist does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Favorites
      summary: Remove artist from favorites
      description: Removes an artist from the favorites list.
      responses:
        '204':
          description: Artist removed from favorites
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Artist not found in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /favs/album/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: 8a101b75-8976-4618-9d50-af17b4c9de59
        description: Album UUID
    post:
      tags:
        - Favorites
      summary: Add album to favorites
      description: Adds an album to the favorites list.
      responses:
        '201':
          description: Album added to favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Album does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Favorites
      summary: Remove album from favorites
      description: Removes an album from the favorites list.
      responses:
        '204':
          description: Album removed from favorites
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Album not found in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /favs/track/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
          example: 627b767a-dccc-4a85-a49d-c82584965401
        description: Track UUID
    post:
      tags:
        - Favorites
      summary: Add track to favorites
      description: Adds a track to the favorites list.
      responses:
        '201':
          description: Track added to favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Track does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Favorites
      summary: Remove track from favorites
      description: Removes a track from the favorites list.
      responses:
        '204':
          description: Track removed from favorites
        '400':
          description: Invalid UUID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Track not found in favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
